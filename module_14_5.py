from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import logging
from crud_functions import *

#api = '7383991464:AAEsDa_KfXqfY8YhR_RBFMpGRTaGzVKuIJE'
api = '7404054421:AAHBP58BtOPj1Y7cvD8FwTLeTmPV24zSRWs'
bot = Bot(token=api)
dp = Dispatcher(bot, storage=MemoryStorage())

products = get_all_products()

kb = ReplyKeyboardMarkup(
    resize_keyboard=True,
    keyboard=[
        [
            KeyboardButton(text='–†–∞—Å—Å—á–∏—Ç–∞—Ç—å'),
            KeyboardButton(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
        ],
        [KeyboardButton(text='–ö—É–ø–∏—Ç—å')],
        [KeyboardButton(text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')]
    ]
)
inline_buy = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text='–†–µ–¥—É–∫—Å–∏–Ω', callback_data='product_buying'),
        InlineKeyboardButton(text='–¢—É—Ä–±–æ—Å–ª–∏–º', callback_data='product_buying'),
        InlineKeyboardButton(text='–ì–æ–ª–¥–ª–∞–π–Ω', callback_data='product_buying'),
        InlineKeyboardButton(text='–õ–∏–Ω–¥–∞–∫—Å–∞', callback_data='product_buying')],
    ]
)


inline_kb = InlineKeyboardMarkup()
inline_butt1 = InlineKeyboardButton(text='–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π', callback_data='calories')
inline_butt2 = InlineKeyboardButton(text='–§–æ—Ä–º—É–ª—ã —Ä–∞—Å—á—ë—Ç–∞', callback_data='formulas')
inline_kb.row(inline_butt1, inline_butt2)

logging.basicConfig(
    filename='telegramm_bot.log', filemode='a', encoding='utf-8',
    format='%(asctime)s | %(levelname)s | %(name)s | %(message)s',
    level=logging.INFO)
def decor_log(func, message: types.Message, txt):
    async def log_writer(*args, **kwargs):
        try:
            logging.info(f'–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.first_name}: {message["text"]}')
        except KeyError:
            logging.info(f'–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.first_name}: –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ - {message["data"]}')
        logging.info(f'–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {message}')
        rez = await func(*args, **kwargs)
        logging.info(f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç: {txt}')
        return rez
    return log_writer
class UserState(StatesGroup):
    gender = State()
    age = State()
    growth = State()
    weight = State()
class RegistrationState(StatesGroup):
    username = State()
    email = State()
    age = State()
    balance = State()

@dp.message_handler(commands = 'start')
async def start(message):
    txt = '–ú—ã –ø–æ–ª—É—á–∏–ª–∏ /start.'
    print(txt)
    message.answer = decor_log(message.answer, message, txt)
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç! \n {message.from_user.username} \n'
                         f' –Ø –ë–æ—Ç –ø–æ–º–æ–≥–∞—é—â–∏–π –í–∞—à–µ–º—É –∑–¥–æ—Ä–æ–≤—å—é. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ', reply_markup=kb)
@dp.message_handler(text='–†–∞—Å—Å—á–∏—Ç–∞—Ç—å')
async def main_menu(message: types.Message):
    print(f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.first_name}')
    txt = '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:'
    message.answer = decor_log(message.answer, message, txt)
    await message.answer(txt, reply_markup=inline_kb)

@dp.callback_query_handler(text='formulas')
async def get_formulas(call: types.CallbackQuery):
    txt = ('–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Ñ–æ—Ä–º—É–ª—ã –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞:\n\n'
           '–¥–ª—è –º—É–∂—á–∏–Ω: 10 —Ö –≤–µ—Å (–∫–≥) + 6,25 x —Ä–æ—Å—Ç (—Å–º) ‚Äì 5 —Ö –≤–æ–∑—Ä–∞—Å—Ç (–≥) + 5\n'
           '–¥–ª—è –∂–µ–Ω—â–∏–Ω: 10 x –≤–µ—Å (–∫–≥) + 6,25 x —Ä–æ—Å—Ç (—Å–º) ‚Äì 5 x –≤–æ–∑—Ä–∞—Å—Ç (–≥) ‚Äì 161\n\n'
           '–§–æ—Ä–º—É–ª–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–µ–∫—Å–∞ –º–∞—Å—Å—ã —Ç–µ–ª–∞ (–ò–ú–¢):\n\n'
           '–ò–ú–¢ = –≤–µ—Å (–∫–≥) / —Ä–æ—Å—Ç (–º) ^ 2')
    await call.message.answer(txt)
    await call.answer()

@dp.callback_query_handler(text='calories')
async def set_gender(call: types.CallbackQuery):
    txt = '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª (–ú/–ñ):'
    await call.message.answer(txt)
    call.answer = decor_log(call.answer, call, txt)
    await UserState.gender.set()
    await call.answer()

@dp.message_handler(state=UserState.gender)
async def set_age(message, state):
    txt = '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:'
    await state.update_data(gender=message.text)
    message.answer = decor_log(message.answer, message, txt)
    await message.answer(txt)
    await UserState.age.set()
@dp.message_handler(state=UserState.age)
async  def set_growth(message, state):
    await  state.update_data(age= message.text)
    txt = '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ä–æ—Å—Ç:'
    data = await state.get_data()
    message.answer = decor_log(message.answer, message, txt)
    await message.answer(txt)
    await UserState.growth.set()


@dp.message_handler(state=UserState.growth)
async def set_weight(message, state):
    await state.update_data(growth=message.text)
    txt = '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å:'
    data = await state.get_data()
    await message.answer(txt)
    message.answer = decor_log(message.answer, message, txt)
    await UserState.weight.set()

@dp.message_handler(state=UserState.weight)
async def send_calories(message, state):
    await state.update_data(weight=message.text)
    data = await state.get_data()
    await state.finish()
    print(data)


    try:
        if data['gender'].upper() == '–ñ':
            calories = 10 * float(data['weight']) + 6.25 * float(data['growth']) - 5 * float(data['age']) - 161
        elif data['gender'].upper() == '–ú':
            calories = 10 * float(data['weight']) + 6.25 * float(data['growth']) - 5 * float(data['age']) + 5
        else:
            raise ValueError
    except ValueError:
        txt = '–í—ã –≤–≤–µ–ª–∏ –æ—à–∏–±–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
    else:
        txt = f'–í–∞—à–∞ –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞: {calories}'

    message.answer = decor_log(message.answer, message, txt)
    await message.answer(f'–í–∞—à–∞ –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞: {txt}')
    await state.finish()

@dp.message_handler(text='–ö—É–ø–∏—Ç—å')
async def get_buying_list(message: types.Message):
    for product in products:
        txt = f'{product[1]} | –û–ø–∏—Å–∞–Ω–∏–µ: {product[2]} | –¶–µ–Ω–∞: {product[3]} —Ä—É–±.'
        with open(product[4], mode='rb') as img:
            message_answer_log = decor_log(message.answer_photo, message, txt)
            await message_answer_log(img, txt)
    txt = '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏:'
    message.answer = decor_log(message.answer, message, txt)
    await message.answer(txt, reply_markup=inline_buy)
@dp.callback_query_handler(text='product_buying')
async def send_confirm_message(call: types.CallbackQuery):
    txt = '–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ø—Ä–æ–¥—É–∫—Ç!'
    call.answer = decor_log(call.answer, call, txt)
    await call.message.answer(txt)
    await call.answer()

@dp.message_handler(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
async def info(message: types.Message):
    await message.answer('–Ø -–ø–æ–º–æ–≥—É –í–∞–º —Å–∫–∏–Ω—É—Ç—å –ª–∏—à–Ω–∏–π "–∂–∏—Ä–æ–∫"!')

@dp.message_handler(text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
async def sing_up(message: types.Message):
    txt = ('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç):')
    message.answer = decor_log(message.answer, message, txt)
    await message.answer(txt)
    await RegistrationState.username.set()

@dp.message_handler(state=RegistrationState.username)
async def set_username(message: types.Message, state):
    if not is_included(message.text):
        await state.update_data(username=message.text)
        txt = '‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π email:'
        message.answer = decor_log(message.answer, message, txt)
        await message.answer(txt)
        await RegistrationState.email.set()
    else:
        txt = '–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è:'
        message.answer = decor_log(message.answer, message, txt)
        await message.answer(txt)
        await RegistrationState.username.set()

@dp.message_handler(state=RegistrationState.email)
async def set_email(message: types.Message, state):
    await state.update_data(email=message.text)
    txt = '‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:'
    message.answer = decor_log(message.answer, message, txt)
    await message.answer(txt)
    await RegistrationState.age.set()


@dp.message_handler(state=RegistrationState.age)
async def set_age(message: types.Message, state):
    await state.update_data(age=message.text)
    data = await state.get_data()
    add_user(data['username'], data['email'], data['age'])
    txt = 'üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.'
    message.answer = decor_log(message.answer, message, txt)
    await message.answer(txt, reply_markup=kb)
    await state.finish()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)